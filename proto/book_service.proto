syntax = "proto3";

package pb;

import "google/api/annotations.proto";
import "book_request.proto";
import "book_response.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/oopchi/gudang_buku_server/pb";

service BookService {
    rpc CreateBook(stream CreateBookRequest) returns (stream BookResponse) {
        option (google.api.http) = {
            post: "/v1/books"
            body: "*"
        };
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Use this API to create a new book and returns a stream of existing books";
			summary: "Create new book";
        };
    }
    rpc GetBook(GetBookRequest) returns (stream BookResponse) {
        option (google.api.http) = {
            get: "/v1/books/{id}"
        };
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Use this API to get a book by id";
			summary: "Get specific book by id";
        };
    }
    rpc ListBooks(ListBooksRequest) returns (stream BookResponse) {
        option (google.api.http) = {
            get: "/v1/books"
        };
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Use this API to get a list of books";
			summary: "Get list of books";
        };
    }
    rpc SoftDeleteBooks(DeleteBooksRequest) returns (stream BookResponse) {
        option (google.api.http) = {
            post: "/v1/books/deletes"
        };
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Use this API to soft delete books and returns a stream of existing books";
			summary: "Soft Delete books";
        };
    }
    rpc ForceDeleteBooks(DeleteBooksRequest) returns (stream BookResponse) {
        option (google.api.http) = {
            post: "/v1/books/force_deletes"
        };
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Use this API to force delete books and returns a stream of existing books";
			summary: "Force Delete books";
        };
    }
    rpc AddUserFavoriteBook(AddUserFavoriteBookRequest) returns (stream BookResponse) {
        option (google.api.http) = {
            post: "/v1/books/favorite"
        };
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Use this API to add a book to a user's favorites that returns a list of that user's favorite books";
			summary: "Add a book to a user's favorites";
        };
    }
    rpc ListUserFavoriteBooks(ListUserFavoriteBooksRequest) returns (stream BookResponse) {
        option (google.api.http) = {
            get: "/v1/books/favorite"
        };
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Use this API to get a list of user favorite's books";
			summary: "Get list of user favorite's books";
        };
    }
    rpc DeleteUserFavoriteBook(DeleteUserFavoriteBookRequest) returns (stream BookResponse) {
        option (google.api.http) = {
            post: "/v1/books/favorite/delete"
        };
		option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
			description: "Use this API to force delete a book from a use favorites and returns a stream of that user's existing favorite book list";
			summary: "Force Delete a user favorite book";
        };
    }
}